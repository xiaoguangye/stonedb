CREATE DATABASE IF NOT EXISTS events_test;
use events_test;
CREATE EVENT one_event ON SCHEDULE EVERY 10 SECOND DO SELECT 123;
SHOW EVENTS;
Db	Name	Definer	Time zone	Type	Execute at	Interval value	Interval field	Starts	Ends	Status	Originator	character_set_client	collation_connection	Database Collation
events_test	one_event	root@localhost	SYSTEM	RECURRING	NULL	10	#	#	NULL	ENABLED	1	latin1	latin1_swedish_ci	latin1_swedish_ci
SELECT EVENT_CATALOG, EVENT_SCHEMA, EVENT_NAME, DEFINER, EVENT_BODY, EVENT_DEFINITION, EVENT_TYPE, EXECUTE_AT, INTERVAL_VALUE, INTERVAL_FIELD, STATUS,ON_COMPLETION, EVENT_COMMENT FROM INFORMATION_SCHEMA.EVENTS ORDER BY EVENT_SCHEMA, EVENT_NAME;
EVENT_CATALOG	EVENT_SCHEMA	EVENT_NAME	DEFINER	EVENT_BODY	EVENT_DEFINITION	EVENT_TYPE	EXECUTE_AT	INTERVAL_VALUE	INTERVAL_FIELD	STATUS	ON_COMPLETION	EVENT_COMMENT
def	events_test	one_event	root@localhost	SQL	SELECT 123	RECURRING	NULL	10	SECOND	ENABLED	NOT PRESERVE	
def	sys_tianmu	daily_event	@	SQL	BEGIN DECLARE db_name_base VARCHAR(255); DECLARE tab_name_base VARCHAR(255); DECLARE col_name VARCHAR(255); DECLARE db_suffix VARCHAR(255); DECLARE tab_suffix VARCHAR(255); DECLARE db_name VARCHAR(255); DECLARE tab_name VARCHAR(255); DECLARE col_default VARCHAR(255); DECLARE nullable VARCHAR(255); DECLARE col_type VARCHAR(255); DECLARE col_comment VARCHAR(255); DECLARE pos INT; DECLARE col_def VARCHAR(255); DECLARE ttl_val INT; DECLARE not_found INT DEFAULT FALSE; DECLARE cur1 CURSOR FOR SELECT database_name, table_name, column_name, database_suffix, table_suffix, ttl FROM sys_tianmu.column_ttl; DECLARE CONTINUE HANDLER FOR NOT FOUND SET not_found = TRUE; OPEN cur1; loop1: LOOP FETCH cur1 INTO db_name_base,tab_name_base,col_name,db_suffix,tab_suffix,ttl_val; IF not_found THEN LEAVE loop1; END IF; BLOCK2: BEGIN DECLARE cur2 CURSOR FOR SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_DEFAULT,IS_NULLABLE,COLUMN_TYPE,COLUMN_COMMENT,ORDINAL_POSITION FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA RLIKE CONCAT(db_name_base, db_suffix) AND TABLE_NAME RLIKE CONCAT_WS('_', tab_name_base, DATE_FORMAT(NOW() - INTERVAL ttl_val+1 DAY, '%Y%m%d'), tab_suffix) AND COLUMN_NAME=col_name; OPEN cur2; loop2: LOOP FETCH cur2 INTO db_name, tab_name, col_default, nullable,col_type,col_comment,pos; IF not_found THEN LEAVE loop2; END IF; set col_def = CONCAT_WS(' ', col_name, col_type); IF nullable='NO' THEN set col_def = CONCAT_WS(' ', col_def, "NOT NULL"); END IF; IF col_default IS NOT NULL THEN set col_def = CONCAT_WS(' ', col_def, "DEFAULT", col_default); END IF; SET col_comment = SUBSTRING(col_comment, 1, instr(col_comment, '; Size[MB]:')-1); IF col_comment != '' THEN set col_def = CONCAT(col_def, " COMMENT ", QUOTE(col_comment)); END IF; IF pos = 1 THEN set col_def = CONCAT_WS(' ', col_def, "FIRST"); ELSE set pos = pos-1; select COLUMN_NAME INTO @b4 from information_schema.columns where TABLE_SCHEMA=db_name AND TABLE_NAME=tab_name AND ORDINAL_POSITION=pos; set col_def = CONCAT_WS(' ', col_def, "AFTER", @b4); END IF; SET @sql_text = CONCAT('ALTER TABLE ', db_name, '.', tab_name, ' DROP COLUMN ', col_name); PREPARE stmt FROM @sql_text; EXECUTE stmt; DEALLOCATE PREPARE stmt; SET @sql_text = CONCAT('ALTER TABLE ', db_name, '.', tab_name, ' ADD COLUMN ', col_def); PREPARE stmt FROM @sql_text; EXECUTE stmt; DEALLOCATE PREPARE stmt; INSERT INTO sys_tianmu.logs(msg) VALUES (CONCAT_WS(' ', 'NULLed column', db_name, tab_name, col_def)); END LOOP; close cur2; END BLOCK2; END LOOP; END	RECURRING	NULL	10	SECOND	ENABLED	NOT PRESERVE	
CREATE DATABASE events_test2;
CREATE USER ev_test@localhost;
GRANT ALL ON events_test.* to ev_test@localhost;
GRANT ALL ON events_test2.* to ev_test@localhost;
REVOKE EVENT ON events_test2.* FROM ev_test@localhost;
select "NEW CONNECTION";
NEW CONNECTION
NEW CONNECTION
SELECT USER(), DATABASE();
USER()	DATABASE()
ev_test@localhost	events_test2
SHOW GRANTS;
Grants for ev_test@localhost
GRANT USAGE ON *.* TO 'ev_test'@'localhost'
GRANT ALL PRIVILEGES ON `events_test`.* TO 'ev_test'@'localhost'
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, TRIGGER ON `events_test2`.* TO 'ev_test'@'localhost'
"Here comes an error:";
SHOW EVENTS;
ERROR 42000: Access denied for user 'ev_test'@'localhost' to database 'events_test2'
USE events_test;
"We should see one event";
SHOW EVENTS;
Db	Name	Definer	Time zone	Type	Execute at	Interval value	Interval field	Starts	Ends	Status	Originator	character_set_client	collation_connection	Database Collation
events_test	one_event	root@localhost	SYSTEM	RECURRING	NULL	10	#	#	NULL	ENABLED	1	latin1	latin1_swedish_ci	latin1_swedish_ci
SELECT CONCAT("Let's create some new events from the name of ", USER());
CONCAT("Let's create some new events from the name of ", USER())
Let's create some new events from the name of ev_test@localhost
CREATE EVENT one_event ON SCHEDULE EVERY 20 SECOND DO SELECT 123;
ERROR HY000: Event 'one_event' already exists
CREATE EVENT two_event ON SCHEDULE EVERY 20 SECOND ON COMPLETION NOT PRESERVE COMMENT "two event" DO SELECT 123;
CREATE EVENT three_event ON SCHEDULE EVERY 20 SECOND ON COMPLETION PRESERVE COMMENT "three event" DO SELECT 123;
"Now we should see 3 events:";
SHOW EVENTS;
Db	Name	Definer	Time zone	Type	Execute at	Interval value	Interval field	Starts	Ends	Status	Originator	character_set_client	collation_connection	Database Collation
events_test	one_event	root@localhost	SYSTEM	RECURRING	NULL	10	#	#	NULL	ENABLED	1	latin1	latin1_swedish_ci	latin1_swedish_ci
events_test	three_event	ev_test@localhost	SYSTEM	RECURRING	NULL	20	#	#	NULL	ENABLED	1	latin1	latin1_swedish_ci	latin1_swedish_ci
events_test	two_event	ev_test@localhost	SYSTEM	RECURRING	NULL	20	#	#	NULL	ENABLED	1	latin1	latin1_swedish_ci	latin1_swedish_ci
"This should show us only 2 events:";
SHOW EVENTS LIKE 't%event';
Db	Name	Definer	Time zone	Type	Execute at	Interval value	Interval field	Starts	Ends	Status	Originator	character_set_client	collation_connection	Database Collation
events_test	three_event	ev_test@localhost	SYSTEM	RECURRING	NULL	20	#	#	NULL	ENABLED	1	latin1	latin1_swedish_ci	latin1_swedish_ci
events_test	two_event	ev_test@localhost	SYSTEM	RECURRING	NULL	20	#	#	NULL	ENABLED	1	latin1	latin1_swedish_ci	latin1_swedish_ci
"This should show us no events:";
SHOW EVENTS FROM test LIKE '%';
Db	Name	Definer	Time zone	Type	Execute at	Interval value	Interval field	Starts	Ends	Status	Originator	character_set_client	collation_connection	Database Collation
GRANT EVENT ON events_test2.* TO ev_test@localhost;
USE events_test2;
CREATE EVENT four_event ON SCHEDULE EVERY 20 SECOND DO SELECT 42;
USE events_test;
"We should see 4 events : one_event, two_event, three_event & four_event"
SELECT EVENT_CATALOG, EVENT_SCHEMA, EVENT_NAME, DEFINER, EVENT_BODY, EVENT_DEFINITION, EVENT_TYPE, EXECUTE_AT, INTERVAL_VALUE, INTERVAL_FIELD, STATUS,ON_COMPLETION, EVENT_COMMENT FROM INFORMATION_SCHEMA.EVENTS ORDER BY EVENT_SCHEMA, EVENT_NAME;
EVENT_CATALOG	EVENT_SCHEMA	EVENT_NAME	DEFINER	EVENT_BODY	EVENT_DEFINITION	EVENT_TYPE	EXECUTE_AT	INTERVAL_VALUE	INTERVAL_FIELD	STATUS	ON_COMPLETION	EVENT_COMMENT
def	events_test	one_event	root@localhost	SQL	SELECT 123	RECURRING	NULL	10	SECOND	ENABLED	NOT PRESERVE	
def	events_test	three_event	ev_test@localhost	SQL	SELECT 123	RECURRING	NULL	20	SECOND	ENABLED	PRESERVE	three event
def	events_test	two_event	ev_test@localhost	SQL	SELECT 123	RECURRING	NULL	20	SECOND	ENABLED	NOT PRESERVE	two event
def	events_test2	four_event	ev_test@localhost	SQL	SELECT 42	RECURRING	NULL	20	SECOND	ENABLED	NOT PRESERVE	
def	sys_tianmu	daily_event	@	SQL	BEGIN DECLARE db_name_base VARCHAR(255); DECLARE tab_name_base VARCHAR(255); DECLARE col_name VARCHAR(255); DECLARE db_suffix VARCHAR(255); DECLARE tab_suffix VARCHAR(255); DECLARE db_name VARCHAR(255); DECLARE tab_name VARCHAR(255); DECLARE col_default VARCHAR(255); DECLARE nullable VARCHAR(255); DECLARE col_type VARCHAR(255); DECLARE col_comment VARCHAR(255); DECLARE pos INT; DECLARE col_def VARCHAR(255); DECLARE ttl_val INT; DECLARE not_found INT DEFAULT FALSE; DECLARE cur1 CURSOR FOR SELECT database_name, table_name, column_name, database_suffix, table_suffix, ttl FROM sys_tianmu.column_ttl; DECLARE CONTINUE HANDLER FOR NOT FOUND SET not_found = TRUE; OPEN cur1; loop1: LOOP FETCH cur1 INTO db_name_base,tab_name_base,col_name,db_suffix,tab_suffix,ttl_val; IF not_found THEN LEAVE loop1; END IF; BLOCK2: BEGIN DECLARE cur2 CURSOR FOR SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_DEFAULT,IS_NULLABLE,COLUMN_TYPE,COLUMN_COMMENT,ORDINAL_POSITION FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA RLIKE CONCAT(db_name_base, db_suffix) AND TABLE_NAME RLIKE CONCAT_WS('_', tab_name_base, DATE_FORMAT(NOW() - INTERVAL ttl_val+1 DAY, '%Y%m%d'), tab_suffix) AND COLUMN_NAME=col_name; OPEN cur2; loop2: LOOP FETCH cur2 INTO db_name, tab_name, col_default, nullable,col_type,col_comment,pos; IF not_found THEN LEAVE loop2; END IF; set col_def = CONCAT_WS(' ', col_name, col_type); IF nullable='NO' THEN set col_def = CONCAT_WS(' ', col_def, "NOT NULL"); END IF; IF col_default IS NOT NULL THEN set col_def = CONCAT_WS(' ', col_def, "DEFAULT", col_default); END IF; SET col_comment = SUBSTRING(col_comment, 1, instr(col_comment, '; Size[MB]:')-1); IF col_comment != '' THEN set col_def = CONCAT(col_def, " COMMENT ", QUOTE(col_comment)); END IF; IF pos = 1 THEN set col_def = CONCAT_WS(' ', col_def, "FIRST"); ELSE set pos = pos-1; select COLUMN_NAME INTO @b4 from information_schema.columns where TABLE_SCHEMA=db_name AND TABLE_NAME=tab_name AND ORDINAL_POSITION=pos; set col_def = CONCAT_WS(' ', col_def, "AFTER", @b4); END IF; SET @sql_text = CONCAT('ALTER TABLE ', db_name, '.', tab_name, ' DROP COLUMN ', col_name); PREPARE stmt FROM @sql_text; EXECUTE stmt; DEALLOCATE PREPARE stmt; SET @sql_text = CONCAT('ALTER TABLE ', db_name, '.', tab_name, ' ADD COLUMN ', col_def); PREPARE stmt FROM @sql_text; EXECUTE stmt; DEALLOCATE PREPARE stmt; INSERT INTO sys_tianmu.logs(msg) VALUES (CONCAT_WS(' ', 'NULLed column', db_name, tab_name, col_def)); END LOOP; close cur2; END BLOCK2; END LOOP; END	RECURRING	NULL	10	SECOND	ENABLED	NOT PRESERVE	
DROP DATABASE events_test2;
"We should see 3 events : one_event, two_event, three_event"
SELECT EVENT_CATALOG, EVENT_SCHEMA, EVENT_NAME, DEFINER, EVENT_BODY, EVENT_DEFINITION, EVENT_TYPE, EXECUTE_AT, INTERVAL_VALUE, INTERVAL_FIELD, STATUS,ON_COMPLETION, EVENT_COMMENT FROM INFORMATION_SCHEMA.EVENTS ORDER BY EVENT_SCHEMA, EVENT_NAME;
EVENT_CATALOG	EVENT_SCHEMA	EVENT_NAME	DEFINER	EVENT_BODY	EVENT_DEFINITION	EVENT_TYPE	EXECUTE_AT	INTERVAL_VALUE	INTERVAL_FIELD	STATUS	ON_COMPLETION	EVENT_COMMENT
def	events_test	one_event	root@localhost	SQL	SELECT 123	RECURRING	NULL	10	SECOND	ENABLED	NOT PRESERVE	
def	events_test	three_event	ev_test@localhost	SQL	SELECT 123	RECURRING	NULL	20	SECOND	ENABLED	PRESERVE	three event
def	events_test	two_event	ev_test@localhost	SQL	SELECT 123	RECURRING	NULL	20	SECOND	ENABLED	NOT PRESERVE	two event
def	sys_tianmu	daily_event	@	SQL	BEGIN DECLARE db_name_base VARCHAR(255); DECLARE tab_name_base VARCHAR(255); DECLARE col_name VARCHAR(255); DECLARE db_suffix VARCHAR(255); DECLARE tab_suffix VARCHAR(255); DECLARE db_name VARCHAR(255); DECLARE tab_name VARCHAR(255); DECLARE col_default VARCHAR(255); DECLARE nullable VARCHAR(255); DECLARE col_type VARCHAR(255); DECLARE col_comment VARCHAR(255); DECLARE pos INT; DECLARE col_def VARCHAR(255); DECLARE ttl_val INT; DECLARE not_found INT DEFAULT FALSE; DECLARE cur1 CURSOR FOR SELECT database_name, table_name, column_name, database_suffix, table_suffix, ttl FROM sys_tianmu.column_ttl; DECLARE CONTINUE HANDLER FOR NOT FOUND SET not_found = TRUE; OPEN cur1; loop1: LOOP FETCH cur1 INTO db_name_base,tab_name_base,col_name,db_suffix,tab_suffix,ttl_val; IF not_found THEN LEAVE loop1; END IF; BLOCK2: BEGIN DECLARE cur2 CURSOR FOR SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_DEFAULT,IS_NULLABLE,COLUMN_TYPE,COLUMN_COMMENT,ORDINAL_POSITION FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA RLIKE CONCAT(db_name_base, db_suffix) AND TABLE_NAME RLIKE CONCAT_WS('_', tab_name_base, DATE_FORMAT(NOW() - INTERVAL ttl_val+1 DAY, '%Y%m%d'), tab_suffix) AND COLUMN_NAME=col_name; OPEN cur2; loop2: LOOP FETCH cur2 INTO db_name, tab_name, col_default, nullable,col_type,col_comment,pos; IF not_found THEN LEAVE loop2; END IF; set col_def = CONCAT_WS(' ', col_name, col_type); IF nullable='NO' THEN set col_def = CONCAT_WS(' ', col_def, "NOT NULL"); END IF; IF col_default IS NOT NULL THEN set col_def = CONCAT_WS(' ', col_def, "DEFAULT", col_default); END IF; SET col_comment = SUBSTRING(col_comment, 1, instr(col_comment, '; Size[MB]:')-1); IF col_comment != '' THEN set col_def = CONCAT(col_def, " COMMENT ", QUOTE(col_comment)); END IF; IF pos = 1 THEN set col_def = CONCAT_WS(' ', col_def, "FIRST"); ELSE set pos = pos-1; select COLUMN_NAME INTO @b4 from information_schema.columns where TABLE_SCHEMA=db_name AND TABLE_NAME=tab_name AND ORDINAL_POSITION=pos; set col_def = CONCAT_WS(' ', col_def, "AFTER", @b4); END IF; SET @sql_text = CONCAT('ALTER TABLE ', db_name, '.', tab_name, ' DROP COLUMN ', col_name); PREPARE stmt FROM @sql_text; EXECUTE stmt; DEALLOCATE PREPARE stmt; SET @sql_text = CONCAT('ALTER TABLE ', db_name, '.', tab_name, ' ADD COLUMN ', col_def); PREPARE stmt FROM @sql_text; EXECUTE stmt; DEALLOCATE PREPARE stmt; INSERT INTO sys_tianmu.logs(msg) VALUES (CONCAT_WS(' ', 'NULLed column', db_name, tab_name, col_def)); END LOOP; close cur2; END BLOCK2; END LOOP; END	RECURRING	NULL	10	SECOND	ENABLED	NOT PRESERVE	
CREATE DATABASE events_test2;
USE events_test2;
CREATE EVENT five_event ON SCHEDULE EVERY 20 SECOND DO SELECT 42;
"Should see 4 events - one, two, three & five"
SELECT EVENT_CATALOG, EVENT_SCHEMA, EVENT_NAME, DEFINER, EVENT_BODY, EVENT_DEFINITION, EVENT_TYPE, EXECUTE_AT, INTERVAL_VALUE, INTERVAL_FIELD, STATUS,ON_COMPLETION, EVENT_COMMENT FROM INFORMATION_SCHEMA.EVENTS ORDER BY EVENT_SCHEMA, EVENT_NAME;
EVENT_CATALOG	EVENT_SCHEMA	EVENT_NAME	DEFINER	EVENT_BODY	EVENT_DEFINITION	EVENT_TYPE	EXECUTE_AT	INTERVAL_VALUE	INTERVAL_FIELD	STATUS	ON_COMPLETION	EVENT_COMMENT
def	events_test	one_event	root@localhost	SQL	SELECT 123	RECURRING	NULL	10	SECOND	ENABLED	NOT PRESERVE	
def	events_test	three_event	ev_test@localhost	SQL	SELECT 123	RECURRING	NULL	20	SECOND	ENABLED	PRESERVE	three event
def	events_test	two_event	ev_test@localhost	SQL	SELECT 123	RECURRING	NULL	20	SECOND	ENABLED	NOT PRESERVE	two event
def	events_test2	five_event	root@localhost	SQL	SELECT 42	RECURRING	NULL	20	SECOND	ENABLED	NOT PRESERVE	
REVOKE EVENT ON events_test2.* FROM ev_test@localhost;
USE test;
"Should see 3 events - one, two & three"
SELECT EVENT_CATALOG, EVENT_SCHEMA, EVENT_NAME, DEFINER, EVENT_BODY, EVENT_DEFINITION, EVENT_TYPE, EXECUTE_AT, INTERVAL_VALUE, INTERVAL_FIELD, STATUS,ON_COMPLETION, EVENT_COMMENT FROM INFORMATION_SCHEMA.EVENTS ORDER BY EVENT_SCHEMA, EVENT_NAME;
EVENT_CATALOG	EVENT_SCHEMA	EVENT_NAME	DEFINER	EVENT_BODY	EVENT_DEFINITION	EVENT_TYPE	EXECUTE_AT	INTERVAL_VALUE	INTERVAL_FIELD	STATUS	ON_COMPLETION	EVENT_COMMENT
def	events_test	one_event	root@localhost	SQL	SELECT 123	RECURRING	NULL	10	SECOND	ENABLED	NOT PRESERVE	
def	events_test	three_event	ev_test@localhost	SQL	SELECT 123	RECURRING	NULL	20	SECOND	ENABLED	PRESERVE	three event
def	events_test	two_event	ev_test@localhost	SQL	SELECT 123	RECURRING	NULL	20	SECOND	ENABLED	NOT PRESERVE	two event
"Let's test ALTER EVENT which changes the definer"
USE events_test;
ALTER EVENT one_event ON SCHEDULE EVERY 10 SECOND;
"The definer should be ev_test@localhost"
SELECT EVENT_CATALOG, EVENT_SCHEMA, EVENT_NAME, DEFINER, EVENT_BODY, EVENT_DEFINITION, EVENT_TYPE, EXECUTE_AT, INTERVAL_VALUE, INTERVAL_FIELD, STATUS,ON_COMPLETION, EVENT_COMMENT FROM INFORMATION_SCHEMA.EVENTS WHERE EVENT_NAME='one_event';
EVENT_CATALOG	EVENT_SCHEMA	EVENT_NAME	DEFINER	EVENT_BODY	EVENT_DEFINITION	EVENT_TYPE	EXECUTE_AT	INTERVAL_VALUE	INTERVAL_FIELD	STATUS	ON_COMPLETION	EVENT_COMMENT
def	events_test	one_event	ev_test@localhost	SQL	SELECT 123	RECURRING	NULL	10	SECOND	ENABLED	NOT PRESERVE	
USE events_test;
ALTER EVENT one_event COMMENT "comment";
"The definer should be root@localhost"
SELECT EVENT_CATALOG, EVENT_SCHEMA, EVENT_NAME, DEFINER, EVENT_BODY, EVENT_DEFINITION, EVENT_TYPE, EXECUTE_AT, INTERVAL_VALUE, INTERVAL_FIELD, STATUS,ON_COMPLETION, EVENT_COMMENT FROM INFORMATION_SCHEMA.EVENTS WHERE EVENT_NAME='one_event';
EVENT_CATALOG	EVENT_SCHEMA	EVENT_NAME	DEFINER	EVENT_BODY	EVENT_DEFINITION	EVENT_TYPE	EXECUTE_AT	INTERVAL_VALUE	INTERVAL_FIELD	STATUS	ON_COMPLETION	EVENT_COMMENT
def	events_test	one_event	root@localhost	SQL	SELECT 123	RECURRING	NULL	10	SECOND	ENABLED	NOT PRESERVE	comment
ALTER EVENT one_event DO SELECT 12;
"The definer should be ev_test@localhost"
SELECT EVENT_CATALOG, EVENT_SCHEMA, EVENT_NAME, DEFINER, EVENT_BODY, EVENT_DEFINITION, EVENT_TYPE, EXECUTE_AT, INTERVAL_VALUE, INTERVAL_FIELD, STATUS,ON_COMPLETION, EVENT_COMMENT FROM INFORMATION_SCHEMA.EVENTS WHERE EVENT_NAME='one_event';
EVENT_CATALOG	EVENT_SCHEMA	EVENT_NAME	DEFINER	EVENT_BODY	EVENT_DEFINITION	EVENT_TYPE	EXECUTE_AT	INTERVAL_VALUE	INTERVAL_FIELD	STATUS	ON_COMPLETION	EVENT_COMMENT
def	events_test	one_event	ev_test@localhost	SQL	SELECT 12	RECURRING	NULL	10	SECOND	ENABLED	NOT PRESERVE	comment
"make the definer again root@localhost"
ALTER EVENT one_event COMMENT "new comment";
"test DROP by another user"
DROP EVENT one_event;
"One event should not be there"
SELECT EVENT_CATALOG, EVENT_SCHEMA, EVENT_NAME, DEFINER, EVENT_BODY, EVENT_DEFINITION, EVENT_TYPE, EXECUTE_AT, INTERVAL_VALUE, INTERVAL_FIELD, STATUS,ON_COMPLETION, EVENT_COMMENT FROM INFORMATION_SCHEMA.EVENTS ORDER BY EVENT_SCHEMA, EVENT_NAME;
EVENT_CATALOG	EVENT_SCHEMA	EVENT_NAME	DEFINER	EVENT_BODY	EVENT_DEFINITION	EVENT_TYPE	EXECUTE_AT	INTERVAL_VALUE	INTERVAL_FIELD	STATUS	ON_COMPLETION	EVENT_COMMENT
def	events_test	three_event	ev_test@localhost	SQL	SELECT 123	RECURRING	NULL	20	SECOND	ENABLED	PRESERVE	three event
def	events_test	two_event	ev_test@localhost	SQL	SELECT 123	RECURRING	NULL	20	SECOND	ENABLED	NOT PRESERVE	two event
def	events_test2	five_event	root@localhost	SQL	SELECT 42	RECURRING	NULL	20	SECOND	ENABLED	NOT PRESERVE	
def	sys_tianmu	daily_event	@	SQL	BEGIN DECLARE db_name_base VARCHAR(255); DECLARE tab_name_base VARCHAR(255); DECLARE col_name VARCHAR(255); DECLARE db_suffix VARCHAR(255); DECLARE tab_suffix VARCHAR(255); DECLARE db_name VARCHAR(255); DECLARE tab_name VARCHAR(255); DECLARE col_default VARCHAR(255); DECLARE nullable VARCHAR(255); DECLARE col_type VARCHAR(255); DECLARE col_comment VARCHAR(255); DECLARE pos INT; DECLARE col_def VARCHAR(255); DECLARE ttl_val INT; DECLARE not_found INT DEFAULT FALSE; DECLARE cur1 CURSOR FOR SELECT database_name, table_name, column_name, database_suffix, table_suffix, ttl FROM sys_tianmu.column_ttl; DECLARE CONTINUE HANDLER FOR NOT FOUND SET not_found = TRUE; OPEN cur1; loop1: LOOP FETCH cur1 INTO db_name_base,tab_name_base,col_name,db_suffix,tab_suffix,ttl_val; IF not_found THEN LEAVE loop1; END IF; BLOCK2: BEGIN DECLARE cur2 CURSOR FOR SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_DEFAULT,IS_NULLABLE,COLUMN_TYPE,COLUMN_COMMENT,ORDINAL_POSITION FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA RLIKE CONCAT(db_name_base, db_suffix) AND TABLE_NAME RLIKE CONCAT_WS('_', tab_name_base, DATE_FORMAT(NOW() - INTERVAL ttl_val+1 DAY, '%Y%m%d'), tab_suffix) AND COLUMN_NAME=col_name; OPEN cur2; loop2: LOOP FETCH cur2 INTO db_name, tab_name, col_default, nullable,col_type,col_comment,pos; IF not_found THEN LEAVE loop2; END IF; set col_def = CONCAT_WS(' ', col_name, col_type); IF nullable='NO' THEN set col_def = CONCAT_WS(' ', col_def, "NOT NULL"); END IF; IF col_default IS NOT NULL THEN set col_def = CONCAT_WS(' ', col_def, "DEFAULT", col_default); END IF; SET col_comment = SUBSTRING(col_comment, 1, instr(col_comment, '; Size[MB]:')-1); IF col_comment != '' THEN set col_def = CONCAT(col_def, " COMMENT ", QUOTE(col_comment)); END IF; IF pos = 1 THEN set col_def = CONCAT_WS(' ', col_def, "FIRST"); ELSE set pos = pos-1; select COLUMN_NAME INTO @b4 from information_schema.columns where TABLE_SCHEMA=db_name AND TABLE_NAME=tab_name AND ORDINAL_POSITION=pos; set col_def = CONCAT_WS(' ', col_def, "AFTER", @b4); END IF; SET @sql_text = CONCAT('ALTER TABLE ', db_name, '.', tab_name, ' DROP COLUMN ', col_name); PREPARE stmt FROM @sql_text; EXECUTE stmt; DEALLOCATE PREPARE stmt; SET @sql_text = CONCAT('ALTER TABLE ', db_name, '.', tab_name, ' ADD COLUMN ', col_def); PREPARE stmt FROM @sql_text; EXECUTE stmt; DEALLOCATE PREPARE stmt; INSERT INTO sys_tianmu.logs(msg) VALUES (CONCAT_WS(' ', 'NULLed column', db_name, tab_name, col_def)); END LOOP; close cur2; END BLOCK2; END LOOP; END	RECURRING	NULL	10	SECOND	ENABLED	NOT PRESERVE	
DROP USER ev_test@localhost;
DROP DATABASE events_test2;
DROP DATABASE events_test;
